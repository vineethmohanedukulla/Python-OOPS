class Employee:
    # to get the count of employees
    countOfEmployees = 0
    # Initialise the partime or full time employee data using the parent class EMployee
    def __init__(self, empID, name, department, salary, balance):
        self.empID = empID
        self.name = name
        self.department = department
        self.salary = salary
        self.balance = balance
        self.isEmployed = True
        self.__class__.countOfEmployees = self.__class__.countOfEmployees + 1

   # function is used to check if the employee is employed or not
    def isEmployed(self):
        return self.isEmployed
    # this method is used to fire the employee by changing the status of the isemployed = false
    def fire(self):
        self.isEmployed = False
        self.salary = 0
    # This method takes the percentage as input and raises its salary by that percentage.
    def giveRaiseByP(self, percent):
        self.salary = self.salary + (self.salary * percent) / 100
    # pay method will add the salary to the balance to be paid when called.
    def pay(self):
        self.balance = self.balance + self.salary

# declaration of FullTimeEmployee which is child class of Employee
class FullTimeEmployee(Employee):
    # used to differentiate the part time and full time employee
    Emptype = 'F'
    #FullTimeEmployee constructor
    def __init__(self, empID, name, department, salary, balance):
        # We will use the parent class to intialize the full time employee object
        super().__init__(empID, name, department, salary, balance)
    # The method is used to raise the percentage of the salary by 10% for full time employee
    def giveRaise(self):
        self.salary = self.salary + (self.salary / 10)

# declaration of PartTimeEmployee which is child class of Employee
class PartTimeEmployee(Employee):
    # used to differentiate the part time and full time employee
    Emptype = 'P'
    # PartTimeEmployee constructor
    def __init__(self, empID, name, department, salary, balance):
        super().__init__(empID, name, department, salary, balance)

    # The method is used to raise the percentage of the salary by 10% for full time employee
    def giveRaise(self):
        self.salary = int(self.salary) + int(self.salary) / 20

# declared empty employeelist
employeesList = []
# opened the input file in read only mode
inputData = open("input.txt", "r")

for line in inputData:
    # split() method to split the line into words
    words = line.split(' ')
    # NEW indicates to create an employee
    if words[0] == "NEW":
        if words[6].rstrip() == "F":
            # based on the input 'F' from the file we are creating full time object
            fullTimeEmployee = FullTimeEmployee(words[1], words[2] + " " + words[3], words[4], int(words[5]), 0)
            # appended the object to the list
            employeesList.append(fullTimeEmployee)
        if words[6].rstrip() == "P":
            # based on the input 'F' from the file we are creating full time object
            partTimeEmployee = PartTimeEmployee(words[1], words[2] + " " + words[3], words[4], int(words[5]), 0)
            # appended the object to the list
            employeesList.append(partTimeEmployee)
    # RAISE indicates to raise the amount of salary based on input
    elif words[0] == "RAISE":
        if len(words) > 2:
            for emp in employeesList:
                # iterated over the employee list to find the particular employee to raise
                if emp.empID == words[1].rstrip():
                    emp.giveRaiseByP(int(words[2].rstrip()))
                    break
        else:
            for emp in employeesList:
                if emp.empID == words[1].rstrip():
                    emp.giveRaise()
    # PAY indicated to pay the salary to the employee
    elif words[0].rstrip() == "PAY":
        for emp in employeesList:
            # iterated over all the employees and payed the salaries to the balance.
            emp.pay()
    # FIRE indicates to remove the employee.
    elif words[0] == "FIRE":
        for emp in employeesList:
            # iterated over the employee list to find the particular employee to fire
            if emp.empID == words[1].rstrip():
                emp.fire()
                break
# we are printing the employee data.
completefiledata = ""
for eachemployee in employeesList:
    # iterating through each employee and collecting the employee data
    eachline = "{0} {1} {2} \n".format(eachemployee.empID, eachemployee.name, eachemployee.department)
    completefiledata += eachline
    if eachemployee.isEmployed:
        # retrieving the current salary
        eachline = "Current Salary: {0}\n".format(eachemployee.salary)
        completefiledata += eachline
    else:
        eachline = "Not employed with the company\n"
        completefiledata += eachline
    # retrieving the current balance of the employee
    eachline = "Pay earned to date: $ {0}\n".format(eachemployee.balance)
    completefiledata += eachline
    if eachemployee.Emptype == "F":
        eachline = "Full-time Employee\n"
        completefiledata += eachline
    else:
        eachline = "Part-time Employee\n"
        completefiledata += eachline
    completefiledata += '\n'
completefiledata += '----\n'
eachline = "Total number of employeesList: {0}\n".format(len(employeesList))
completefiledata += eachline

def AvgSalPaidToAllEmps(employeesList1):
    nooffulltimes = 0
    noofpartimes = 0
    totalfulltimesalary = 0
    totalparttimesalary = 0
    for emp in employeesList1:
        if emp.Emptype == 'F':
            # noOfFullTimes Variable is used to count the number of full times employees and their total salaries
            nooffulltimes += 1
            totalfulltimesalary += emp.salary
        else:
            # noOfPartTimes Variable is used to count the number of part times employees and their total salaries
            noofpartimes += 1
            totalparttimesalary += emp.salary
    return [totalfulltimesalary/nooffulltimes, totalparttimesalary/noofpartimes]

totals = AvgSalPaidToAllEmps(employeesList)
eachline = "Average Salary paid to all Full-time employees: ${0}\n".format(totals[0])
completefiledata += eachline
eachline = "Average Salary paid to all Part-time employees: ${0}\n".format(totals[1])
completefiledata += eachline
# created a file in append mode
file = open("output.txt", "a")
# written the collected data into the file
file.write(completefiledata)
# closed the stream
file.close()

# Question - 2
import requests
from bs4 import BeautifulSoup

# used get request to download the content in the response.
html = requests.get("https://en.wikipedia.org/wiki/Machine_learning")
# below line is used to parse the HTML content
beautifulObj = BeautifulSoup(html.content, "html.parser")
# printed the title of the web page
print(beautifulObj.title.string)
# finding the <a/> tags from the page and printing it to console
print(beautifulObj.findAll('a'))
# iterating through all the <a/> tags and get the href links
for link in beautifulObj.findAll('a'):
    # printing all the href's to console.
    print(link.get('href'))